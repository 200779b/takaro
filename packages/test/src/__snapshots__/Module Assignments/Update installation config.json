{
  "body": {
    "meta": {},
    "data": {
      "gameserverId": "799e6637-6a59-4f69-bd99-99326015973b",
      "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
      "module": {
        "id": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
        "createdAt": "2024-03-09T08:07:44.014Z",
        "updatedAt": "2024-03-09T08:07:44.014Z",
        "name": "teleports",
        "description": "A set of commands to allow players to set their own teleport points and teleport to them.",
        "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"timeout\":{\"title\":\"Timeout\",\"description\":\"The time one has to wait before teleporting again.\",\"x-component\":\"duration\",\"type\":\"number\",\"minimum\":0,\"default\":1000},\"allowPublicTeleports\":{\"type\":\"boolean\",\"description\":\"Players can create public teleports.\",\"default\":false}},\"required\":[],\"additionalProperties\":false}",
        "uiSchema": "{\"timeout\":{\"ui:widget\":\"duration\"}}",
        "systemConfigSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"commands\":{\"type\":\"object\",\"properties\":{\"tplist\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"teleportwaypoint\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"teleport\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"setwaypoint\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"settp\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"setpublic\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"setprivate\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"listwaypoints\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"deletewaypoint\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"deletetp\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}}},\"required\":[],\"default\":{}}},\"required\":[\"commands\"],\"additionalProperties\":false}",
        "builtin": "teleports",
        "cronJobs": [],
        "hooks": [],
        "commands": [
          {
            "id": "2c27a839-1191-4d83-ae48-9f2d7e179ee8",
            "createdAt": "2024-03-09T08:07:44.077Z",
            "updatedAt": "2024-03-09T08:07:44.086Z",
            "name": "tplist",
            "trigger": "tplist",
            "helpText": "Lists all your set locations.",
            "functionId": "2315d736-ea76-4137-8dca-ca489dd3f91d",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "2315d736-ea76-4137-8dca-ca489dd3f91d",
              "createdAt": "2024-03-09T08:07:44.069Z",
              "updatedAt": "2024-03-09T08:07:44.073Z",
              "code": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    const { pog, gameServerId, module: mod } = data;\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data;\n    const ownedTeleports = (await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n        search: {\n            key: 'tp',\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    })).data.data;\n    const maybePublicTeleports = (await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId],\n        },\n        search: {\n            key: ['tp'],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    })).data.data;\n    const teleports = maybePublicTeleports.filter((tele) => {\n        const teleport = JSON.parse(tele.value);\n        const isPublic = teleport.public && teleport.playerId !== pog.playerId;\n        const isOwned = ownedTeleports.find((t) => t.playerId === pog.playerId);\n        return isPublic || isOwned;\n    });\n    if (teleports.length === 0) {\n        await data.player.pm(`You have no teleports set, use ${prefix}settp <name> to set one.`);\n        return;\n    }\n    await data.player.pm(`You have ${teleports.length} teleport${teleports.length === 1 ? '' : 's'} available`);\n    for (const rawTeleport of teleports) {\n        const teleport = JSON.parse(rawTeleport.value);\n        await data.player.pm(` - ${teleport.name}: ${teleport.x}, ${teleport.y}, ${teleport.z} ${teleport.public ? '(public)' : ''}`);\n    }\n}\nawait main();\n//# sourceMappingURL=tplist.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": []
          },
          {
            "id": "7478faea-1755-4bc7-a1b1-f3b3b9b96fa3",
            "createdAt": "2024-03-09T08:07:44.078Z",
            "updatedAt": "2024-03-09T08:07:44.087Z",
            "name": "teleportwaypoint",
            "trigger": "teleportwaypoint",
            "helpText": "Placeholder command, this will not be used directly. The module will install aliases for this command corresponding to the waypoint names.",
            "functionId": "4e190e27-fdd4-445b-99fa-9e3653c6e7c6",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "4e190e27-fdd4-445b-99fa-9e3653c6e7c6",
              "createdAt": "2024-03-09T08:07:44.071Z",
              "updatedAt": "2024-03-09T08:07:44.076Z",
              "code": "import { takaro, data, TakaroUserError, checkPermission } from '@takaro/helpers';\nfunction getWaypointName(name) {\n    return `waypoint ${name}`;\n}\nasync function main() {\n    const { pog, gameServerId, trigger } = data;\n    if (!checkPermission(pog, `WAYPOINTS_USE_${trigger.toUpperCase()}_${gameServerId}`)) {\n        throw new TakaroUserError(`You are not allowed to use the waypoint ${trigger}.`);\n    }\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsInstallation } = await ensureWaypointsModule();\n    const variable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getWaypointName(trigger)],\n            gameServerId: [gameServerId],\n            moduleId: [waypointsInstallation.moduleId],\n        },\n    });\n    if (variable.data.data.length === 0) {\n        throw new TakaroUserError(`Waypoint ${trigger} does not exist.`);\n    }\n    const waypoint = JSON.parse(variable.data.data[0].value);\n    await takaro.gameserver.gameServerControllerTeleportPlayer(gameServerId, pog.playerId, {\n        x: waypoint.x,\n        y: waypoint.y,\n        z: waypoint.z,\n    });\n    await pog.pm(`Teleported to waypoint ${trigger}.`);\n}\nawait main();\n//# sourceMappingURL=teleportwaypoint.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": []
          },
          {
            "id": "f02b74cd-629c-4fa4-9fd9-39e197c54cd7",
            "createdAt": "2024-03-09T08:07:44.076Z",
            "updatedAt": "2024-03-09T08:07:44.086Z",
            "name": "teleport",
            "trigger": "tp",
            "helpText": "Teleports to one of your set locations.",
            "functionId": "ff34046a-9952-4d08-b728-789c190f9eff",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "ff34046a-9952-4d08-b728-789c190f9eff",
              "createdAt": "2024-03-09T08:07:44.069Z",
              "updatedAt": "2024-03-09T08:07:44.073Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nimport { findTp } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, arguments: args, module: mod } = data;\n    if (!checkPermission(pog, 'TELEPORTS_USE')) {\n        throw new TakaroUserError('You do not have permission to use teleports.');\n    }\n    const ownedTeleportRes = await findTp(args.tp, pog.playerId);\n    let teleports = ownedTeleportRes.data.data;\n    if (mod.userConfig.allowPublicTeleports) {\n        const maybePublicTeleportRes = await findTp(args.tp);\n        const publicTeleports = maybePublicTeleportRes.data.data.filter((tele) => {\n            const teleport = JSON.parse(tele.value);\n            return teleport.public;\n        });\n        teleports = teleports.concat(publicTeleports);\n    }\n    if (teleports.length === 0) {\n        throw new TakaroUserError(`Teleport ${args.tp} does not exist.`);\n    }\n    const timeout = mod.userConfig.timeout;\n    if (timeout !== 0) {\n        const lastExecuted = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: ['lastExecuted'],\n                gameServerId: [gameServerId],\n                playerId: [pog.playerId],\n                moduleId: [mod.moduleId],\n            },\n        });\n        let lastExecutedRecord = lastExecuted.data.data[0];\n        if (!lastExecutedRecord) {\n            const createRes = await takaro.variable.variableControllerCreate({\n                key: 'lastExecuted',\n                gameServerId,\n                playerId: pog.playerId,\n                moduleId: mod.moduleId,\n                value: new Date().toISOString(),\n            });\n            console.log(createRes);\n            lastExecutedRecord = createRes.data.data;\n        }\n        else {\n            const lastExecutedTime = new Date(lastExecutedRecord.value);\n            const now = new Date();\n            const diff = now.getTime() - lastExecutedTime.getTime();\n            if (diff < timeout) {\n                throw new TakaroUserError('You cannot teleport yet. Please wait before trying again.');\n            }\n        }\n        const teleport = JSON.parse(teleports[0].value);\n        await takaro.gameserver.gameServerControllerTeleportPlayer(gameServerId, pog.playerId, {\n            x: teleport.x,\n            y: teleport.y,\n            z: teleport.z,\n        });\n        await data.player.pm(`Teleported to ${teleport.name}.`);\n        if (timeout !== 0 && lastExecutedRecord) {\n            await takaro.variable.variableControllerUpdate(lastExecutedRecord.id, {\n                value: new Date().toISOString(),\n            });\n        }\n        return;\n    }\n    const teleport = JSON.parse(teleports[0].value);\n    await takaro.gameserver.gameServerControllerTeleportPlayer(gameServerId, pog.playerId, {\n        x: teleport.x,\n        y: teleport.y,\n        z: teleport.z,\n    });\n    await data.player.pm(`Teleported to ${teleport.name}.`);\n}\nawait main();\n//# sourceMappingURL=teleport.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "2d5aa259-dc45-4481-a30b-bf4b138a1717",
                "createdAt": "2024-03-09T08:07:44.108Z",
                "updatedAt": "2024-03-09T08:07:44.114Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location to teleport to.",
                "defaultValue": null,
                "commandId": "f02b74cd-629c-4fa4-9fd9-39e197c54cd7",
                "position": 0
              }
            ]
          },
          {
            "id": "790e640d-8b47-43ef-8456-35c2408a2f69",
            "createdAt": "2024-03-09T08:07:44.080Z",
            "updatedAt": "2024-03-09T08:07:44.089Z",
            "name": "setwaypoint",
            "trigger": "setwaypoint",
            "helpText": "Creates a new waypoint.",
            "functionId": "2483ea8e-ac2d-45fd-a1c7-ed65242ef605",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "2483ea8e-ac2d-45fd-a1c7-ed65242ef605",
              "createdAt": "2024-03-09T08:07:44.070Z",
              "updatedAt": "2024-03-09T08:07:44.075Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nfunction getWaypointName(name) {\n    return `waypoint ${name}`;\n}\nasync function main() {\n    const { pog, gameServerId, module: mod, arguments: args } = data;\n    if (!checkPermission(pog, 'TELEPORTS_MANAGE_WAYPOINTS')) {\n        throw new TakaroUserError('You do not have permission to manage waypoints.');\n    }\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsInstallation, waypointsDefinition } = await ensureWaypointsModule();\n    try {\n        await takaro.variable.variableControllerCreate({\n            moduleId: waypointsInstallation.moduleId,\n            gameServerId,\n            key: getWaypointName(args.waypoint),\n            value: JSON.stringify({\n                x: pog.positionX,\n                y: pog.positionY,\n                z: pog.positionZ,\n            }),\n        });\n    }\n    catch (error) {\n        if (error.message === 'Request failed with status code 409') {\n            throw new TakaroUserError(`Waypoint ${args.waypoint} already exists.`);\n        }\n    }\n    const teleportCommand = await takaro.command.commandControllerSearch({\n        filters: {\n            moduleId: [mod.moduleId],\n            name: ['teleportwaypoint'],\n        },\n    });\n    await takaro.command.commandControllerCreate({\n        moduleId: waypointsInstallation.moduleId,\n        name: `waypoint ${args.waypoint} server ${gameServerId}`,\n        trigger: args.waypoint,\n        helpText: `Teleport to waypoint ${args.waypoint}.`,\n        function: teleportCommand.data.data[0].function.code,\n    });\n    const existingPermissions = waypointsDefinition.permissions || [];\n    const permissionInputDTOs = existingPermissions.map((permission) => ({\n        permission: permission.permission,\n        description: permission.description,\n        friendlyName: permission.friendlyName,\n        canHaveCount: permission.canHaveCount,\n    }));\n    const gameServer = (await takaro.gameserver.gameServerControllerGetOne(gameServerId)).data.data;\n    await takaro.module.moduleControllerUpdate(waypointsInstallation.moduleId, {\n        permissions: [\n            {\n                permission: `WAYPOINTS_USE_${args.waypoint.toUpperCase()}_${gameServerId}`,\n                description: `Use the waypoint ${args.waypoint} on ${gameServer.name}.`,\n                friendlyName: `Use waypoint ${args.waypoint} on ${gameServer.name}`,\n                canHaveCount: false,\n            },\n            ...permissionInputDTOs,\n        ],\n    });\n    // Need to reinstall the module to ensure the new commands systemconfig and permissions are properly in place\n    await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsInstallation.moduleId, {\n        systemConfig: JSON.stringify(waypointsInstallation.systemConfig),\n        userConfig: JSON.stringify(waypointsInstallation.userConfig),\n    });\n    await pog.pm(`Waypoint ${args.waypoint} set.`);\n}\nawait main();\n//# sourceMappingURL=setwaypoint.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "7a3cdd98-fe35-4600-953c-e322e2b35eb1",
                "createdAt": "2024-03-09T08:07:44.114Z",
                "updatedAt": "2024-03-09T08:07:44.117Z",
                "name": "waypoint",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "790e640d-8b47-43ef-8456-35c2408a2f69",
                "position": 0
              }
            ]
          },
          {
            "id": "fd7dbbc1-8d9a-40b6-b918-817e834f9e5f",
            "createdAt": "2024-03-09T08:07:44.079Z",
            "updatedAt": "2024-03-09T08:07:44.087Z",
            "name": "settp",
            "trigger": "settp",
            "helpText": "Sets a location to teleport to.",
            "functionId": "38ef63b5-402f-402a-82a0-ebbbd436ce44",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "38ef63b5-402f-402a-82a0-ebbbd436ce44",
              "createdAt": "2024-03-09T08:07:44.071Z",
              "updatedAt": "2024-03-09T08:07:44.076Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey, findTp } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, module: mod, arguments: args } = data;\n    const hasPermission = checkPermission(pog, 'TELEPORTS_USE');\n    if (!hasPermission) {\n        throw new TakaroUserError('You do not have permission to use teleports.');\n    }\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data.value;\n    const existingVariable = await findTp(args.tp);\n    if (existingVariable.data.data.length > 0) {\n        throw new TakaroUserError(`Teleport ${args.tp} already exists, use ${prefix}deletetp ${args.tp} to delete it.`);\n    }\n    const allPlayerTeleports = await takaro.variable.variableControllerSearch({\n        search: {\n            key: getVariableKey(''),\n        },\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n    });\n    if (allPlayerTeleports.data.data.length >= hasPermission.count) {\n        throw new TakaroUserError(`You have reached the maximum number of teleports for your role, maximum allowed is ${hasPermission.count}`);\n    }\n    await takaro.variable.variableControllerCreate({\n        key: getVariableKey(args.tp),\n        value: JSON.stringify({\n            name: args.tp,\n            x: data.pog.positionX,\n            y: data.pog.positionY,\n            z: data.pog.positionZ,\n        }),\n        gameServerId,\n        moduleId: mod.moduleId,\n        playerId: pog.playerId,\n    });\n    await data.player.pm(`Teleport ${args.tp} set.`);\n}\nawait main();\n//# sourceMappingURL=settp.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "4b64f3f0-32f0-45e1-9c6e-bd6619cbb3da",
                "createdAt": "2024-03-09T08:07:44.113Z",
                "updatedAt": "2024-03-09T08:07:44.116Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "fd7dbbc1-8d9a-40b6-b918-817e834f9e5f",
                "position": 0
              }
            ]
          },
          {
            "id": "fa5c0465-1514-4453-ae4e-31c5d851d1cc",
            "createdAt": "2024-03-09T08:07:44.077Z",
            "updatedAt": "2024-03-09T08:07:44.088Z",
            "name": "setpublic",
            "trigger": "setpublic",
            "helpText": "Sets a teleport to be public, allowing other players to teleport to it.",
            "functionId": "4d23b186-4343-446a-a19c-e369128959d0",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "4d23b186-4343-446a-a19c-e369128959d0",
              "createdAt": "2024-03-09T08:07:44.070Z",
              "updatedAt": "2024-03-09T08:07:44.074Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, module: mod, arguments: args } = data;\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data;\n    if (!mod.userConfig.allowPublicTeleports) {\n        throw new TakaroUserError('Public teleports are disabled.');\n    }\n    const hasPermission = checkPermission(pog, 'TELEPORTS_CREATE_PUBLIC');\n    if (!hasPermission) {\n        throw new TakaroUserError('You do not have permission to create public teleports.');\n    }\n    const existingTeleportsForPlayerRes = await takaro.variable.variableControllerSearch({\n        search: {\n            key: 'tp_',\n        },\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n    });\n    const existingPublicTeleportsForPlayer = existingTeleportsForPlayerRes.data.data.filter((tp) => {\n        const teleport = JSON.parse(tp.value);\n        return teleport.public;\n    });\n    if (existingPublicTeleportsForPlayer.length >= hasPermission.count) {\n        throw new TakaroUserError(`You have reached the maximum number of public teleports for your role, maximum allowed is ${hasPermission.count}`);\n    }\n    const teleportRes = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n            key: [getVariableKey(args.tp)],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    });\n    const teleports = teleportRes.data.data;\n    if (teleports.length === 0) {\n        throw new TakaroUserError(`No teleport with name ${args.tp} found, use ${prefix}settp <name> to set one first.`);\n    }\n    const teleportRecord = teleports[0];\n    const teleport = JSON.parse(teleportRecord.value);\n    await takaro.variable.variableControllerUpdate(teleportRecord.id, {\n        value: JSON.stringify({\n            ...teleport,\n            public: true,\n        }),\n    });\n    await data.player.pm(`Teleport ${args.tp} is now public.`);\n}\nawait main();\n//# sourceMappingURL=setpublic.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "d0bfff22-7ecf-44a7-b488-2e5c1e6d818b",
                "createdAt": "2024-03-09T08:07:44.115Z",
                "updatedAt": "2024-03-09T08:07:44.118Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "fa5c0465-1514-4453-ae4e-31c5d851d1cc",
                "position": 0
              }
            ]
          },
          {
            "id": "a1d4eb53-01fc-42bc-a577-c7287bbfbfbe",
            "createdAt": "2024-03-09T08:07:44.078Z",
            "updatedAt": "2024-03-09T08:07:44.088Z",
            "name": "setprivate",
            "trigger": "setprivate",
            "helpText": "Sets a teleport to be private, only the teleport owner can teleport to it.",
            "functionId": "bb5bfd01-1e96-4bb7-912d-0a3eebf77f40",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "bb5bfd01-1e96-4bb7-912d-0a3eebf77f40",
              "createdAt": "2024-03-09T08:07:44.070Z",
              "updatedAt": "2024-03-09T08:07:44.075Z",
              "code": "import { takaro, data, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, arguments: args, module: mod } = data;\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data;\n    const teleportRes = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            key: [getVariableKey(args.tp)],\n            moduleId: [mod.moduleId],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    });\n    const teleports = teleportRes.data.data;\n    if (teleports.length === 0) {\n        throw new TakaroUserError(`No teleport with name ${args.tp} found, use ${prefix}settp <name> to set one first.`);\n    }\n    const teleportRecord = teleports[0];\n    const teleport = JSON.parse(teleportRecord.value);\n    await takaro.variable.variableControllerUpdate(teleportRecord.id, {\n        value: JSON.stringify({\n            ...teleport,\n            public: false,\n        }),\n    });\n    await data.player.pm(`Teleport ${args.tp} is now private.`);\n}\nawait main();\n//# sourceMappingURL=setprivate.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "07550a12-7be6-4e0d-86d0-62239af2c859",
                "createdAt": "2024-03-09T08:07:44.116Z",
                "updatedAt": "2024-03-09T08:07:44.118Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "a1d4eb53-01fc-42bc-a577-c7287bbfbfbe",
                "position": 0
              }
            ]
          },
          {
            "id": "9bed944d-53be-401c-a18a-ddeb43e042db",
            "createdAt": "2024-03-09T08:07:44.080Z",
            "updatedAt": "2024-03-09T08:07:44.090Z",
            "name": "listwaypoints",
            "trigger": "waypoints",
            "helpText": "Lists all waypoints.",
            "functionId": "64c5ce0f-06cf-4208-b228-679f3856df9c",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "64c5ce0f-06cf-4208-b228-679f3856df9c",
              "createdAt": "2024-03-09T08:07:44.071Z",
              "updatedAt": "2024-03-09T08:07:44.075Z",
              "code": "import { takaro, data, checkPermission } from '@takaro/helpers';\nasync function main() {\n    const { pog, gameServerId } = data;\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsDefinition } = await ensureWaypointsModule();\n    const allWaypoints = waypointsDefinition.commands;\n    const waypointsWithPermission = allWaypoints\n        .filter((waypoint) => checkPermission(pog, `WAYPOINTS_USE_${waypoint.trigger.toUpperCase()}_${gameServerId}`))\n        .sort((a, b) => a.trigger.localeCompare(b.trigger));\n    if (!waypointsWithPermission.length) {\n        await pog.pm('There are no waypoints available.');\n        return;\n    }\n    await pog.pm(`Available waypoints: ${waypointsWithPermission.map((waypoint) => waypoint.trigger).join(', ')}`);\n}\nawait main();\n//# sourceMappingURL=listwaypoints.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": []
          },
          {
            "id": "4a39f55e-0a54-4f2f-bd8e-d45eb4fe167b",
            "createdAt": "2024-03-09T08:07:44.080Z",
            "updatedAt": "2024-03-09T08:07:44.089Z",
            "name": "deletewaypoint",
            "trigger": "deletewaypoint",
            "helpText": "Deletes a waypoint.",
            "functionId": "68035e64-01c4-48b5-a9ab-d44956bf9ac3",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "68035e64-01c4-48b5-a9ab-d44956bf9ac3",
              "createdAt": "2024-03-09T08:07:44.073Z",
              "updatedAt": "2024-03-09T08:07:44.077Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nfunction getWaypointName(name) {\n    return `waypoint ${name}`;\n}\nasync function main() {\n    const { pog, gameServerId, arguments: args } = data;\n    if (!checkPermission(pog, 'TELEPORTS_MANAGE_WAYPOINTS')) {\n        throw new TakaroUserError('You do not have permission to manage waypoints.');\n    }\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsInstallation } = await ensureWaypointsModule();\n    const variable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getWaypointName(args.waypoint)],\n            gameServerId: [gameServerId],\n            moduleId: [waypointsInstallation.moduleId],\n        },\n    });\n    if (!variable.data.data.length) {\n        throw new TakaroUserError(`Waypoint ${args.waypoint} doesn't exist.`);\n    }\n    await takaro.variable.variableControllerDelete(variable.data.data[0].id);\n    const teleportCommand = await takaro.command.commandControllerSearch({\n        filters: {\n            moduleId: [waypointsInstallation.moduleId],\n            name: [`waypoint ${args.waypoint} server ${gameServerId}`],\n        },\n    });\n    if (teleportCommand.data.data.length) {\n        await takaro.command.commandControllerRemove(teleportCommand.data.data[0].id);\n    }\n    await pog.pm(`Waypoint ${args.waypoint} deleted.`);\n}\nawait main();\n//# sourceMappingURL=deletewaypoint.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "df45bbc5-c289-4d9f-a3f6-b03b2c95804d",
                "createdAt": "2024-03-09T08:07:44.113Z",
                "updatedAt": "2024-03-09T08:07:44.117Z",
                "name": "waypoint",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "4a39f55e-0a54-4f2f-bd8e-d45eb4fe167b",
                "position": 0
              }
            ]
          },
          {
            "id": "263e57a8-d14e-4632-b0ec-d848ebaf831c",
            "createdAt": "2024-03-09T08:07:44.077Z",
            "updatedAt": "2024-03-09T08:07:44.086Z",
            "name": "deletetp",
            "trigger": "deletetp",
            "helpText": "Deletes a location.",
            "functionId": "2cc99503-0f60-47cf-81cc-05a0a4bdc70d",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "function": {
              "id": "2cc99503-0f60-47cf-81cc-05a0a4bdc70d",
              "createdAt": "2024-03-09T08:07:44.070Z",
              "updatedAt": "2024-03-09T08:07:44.074Z",
              "code": "import { takaro, data, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, arguments: args, module: mod } = data;\n    const existingVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getVariableKey(args.tp)],\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n    });\n    if (existingVariable.data.data.length === 0) {\n        throw new TakaroUserError(`Teleport ${args.tp} does not exist.`);\n    }\n    await takaro.variable.variableControllerDelete(existingVariable.data.data[0].id);\n    await data.player.pm(`Teleport ${args.tp} deleted.`);\n}\nawait main();\n//# sourceMappingURL=deletetp.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "78f8d2c3-05a3-456a-8a34-5722e391c351",
                "createdAt": "2024-03-09T08:07:44.112Z",
                "updatedAt": "2024-03-09T08:07:44.116Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "263e57a8-d14e-4632-b0ec-d848ebaf831c",
                "position": 0
              }
            ]
          }
        ],
        "functions": [
          {
            "id": "5c9478a4-a561-4e41-aa5f-e3241b11ef00",
            "createdAt": "2024-03-09T08:07:44.071Z",
            "updatedAt": "2024-03-09T08:07:44.076Z",
            "code": "import { takaro, data } from '@takaro/helpers';\nexport function getVariableKey(tpName) {\n    return `tp_${tpName}`;\n}\nexport async function findTp(tpName, playerId) {\n    const { gameServerId, module: mod } = data;\n    return takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getVariableKey(tpName)],\n            gameServerId: [gameServerId],\n            playerId: [playerId].filter(Boolean),\n            moduleId: [mod.moduleId],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    });\n}\n//# sourceMappingURL=utils.js.map",
            "name": "utils",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec"
          }
        ],
        "permissions": [
          {
            "id": "f084c330-0288-4798-8ef7-a88f8cacfaa9",
            "createdAt": "2024-03-09T08:07:44.020Z",
            "updatedAt": "2024-03-09T08:07:44.020Z",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "permission": "TELEPORTS_MANAGE_WAYPOINTS",
            "friendlyName": "Manage waypoints",
            "description": "Allows creating, deleting, and managing waypoints.",
            "canHaveCount": false
          },
          {
            "id": "327182e2-d16b-49b2-a403-77469302543f",
            "createdAt": "2024-03-09T08:07:44.020Z",
            "updatedAt": "2024-03-09T08:07:44.020Z",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "permission": "TELEPORTS_USE",
            "friendlyName": "Use Teleports",
            "description": "Allows the player to use teleports modules.",
            "canHaveCount": true
          },
          {
            "id": "fde24089-bf45-4335-8a84-38e9b8c73e5d",
            "createdAt": "2024-03-09T08:07:44.020Z",
            "updatedAt": "2024-03-09T08:07:44.020Z",
            "moduleId": "4a5d7424-0149-4389-b0e9-fdbf39734cec",
            "permission": "TELEPORTS_CREATE_PUBLIC",
            "friendlyName": "Create Public Teleports",
            "description": "Allows the player to create public teleports.",
            "canHaveCount": true
          }
        ]
      },
      "userConfig": {
        "timeout": 1337,
        "allowPublicTeleports": false
      },
      "systemConfig": {
        "commands": {
          "settp": {
            "cost": 0,
            "delay": 0
          },
          "tplist": {
            "cost": 0,
            "delay": 0
          },
          "deletetp": {
            "cost": 0,
            "delay": 0
          },
          "teleport": {
            "cost": 0,
            "delay": 0
          },
          "setpublic": {
            "cost": 0,
            "delay": 0
          },
          "setprivate": {
            "cost": 0,
            "delay": 0
          },
          "setwaypoint": {
            "cost": 0,
            "delay": 0
          },
          "listwaypoints": {
            "cost": 0,
            "delay": 0
          },
          "deletewaypoint": {
            "cost": 0,
            "delay": 0
          },
          "teleportwaypoint": {
            "cost": 0,
            "delay": 0
          }
        }
      }
    }
  },
  "status": 200,
  "test": {
    "group": "Module Assignments",
    "snapshot": true,
    "name": "Update installation config",
    "filteredFields": [
      "gameserverId",
      "moduleId",
      "functionId",
      "commandId"
    ],
    "expectedStatus": 200,
    "standardEnvironment": true
  }
}