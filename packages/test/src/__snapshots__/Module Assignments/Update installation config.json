{
  "body": {
    "meta": {},
    "data": {
      "gameserverId": "735e7408-fcda-4aa0-a02e-cea195ada8d6",
      "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
      "module": {
        "id": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
        "createdAt": "2024-03-02T15:42:19.318Z",
        "updatedAt": "2024-03-02T15:42:19.318Z",
        "name": "teleports",
        "description": "A set of commands to allow players to set their own teleport points and teleport to them.",
        "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"timeout\":{\"title\":\"Timeout\",\"description\":\"The time one has to wait before teleporting again.\",\"x-component\":\"duration\",\"type\":\"number\",\"minimum\":0,\"default\":1000},\"allowPublicTeleports\":{\"type\":\"boolean\",\"description\":\"Players can create public teleports.\",\"default\":false}},\"required\":[],\"additionalProperties\":false}",
        "uiSchema": "{\"timeout\":{\"ui:widget\":\"duration\"}}",
        "systemConfigSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"commands\":{\"type\":\"object\",\"properties\":{\"tplist\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"teleportwaypoint\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"teleport\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"setwaypoint\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"settp\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"setpublic\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"setprivate\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"listwaypoints\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"deletewaypoint\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}},\"deletetp\":{\"type\":\"object\",\"properties\":{\"delay\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"maximum\":86400,\"description\":\"How many seconds to wait before executing the command.\"},\"cost\":{\"type\":\"number\",\"default\":0,\"minimum\":0,\"description\":\"How much currency to deduct from the player before executing the command.\"},\"aliases\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Trigger the command with other names than the default\"}},\"required\":[],\"default\":{}}},\"required\":[],\"default\":{}}},\"required\":[\"commands\"],\"additionalProperties\":false}",
        "builtin": "teleports",
        "cronJobs": [],
        "hooks": [],
        "commands": [
          {
            "id": "3888ea6d-22a3-4c15-914c-ca38d8822f5b",
            "createdAt": "2024-03-02T15:42:19.467Z",
            "updatedAt": "2024-03-02T15:42:19.499Z",
            "name": "tplist",
            "trigger": "tplist",
            "helpText": "Lists all your set locations.",
            "functionId": "0991170e-3d97-471e-9daa-c0ecc47e3525",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "0991170e-3d97-471e-9daa-c0ecc47e3525",
              "createdAt": "2024-03-02T15:42:19.440Z",
              "updatedAt": "2024-03-02T15:42:19.459Z",
              "code": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    const { pog, gameServerId, module: mod } = data;\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data;\n    const ownedTeleports = (await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n        search: {\n            key: 'tp',\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    })).data.data;\n    const maybePublicTeleports = (await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId],\n        },\n        search: {\n            key: ['tp'],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    })).data.data;\n    const teleports = maybePublicTeleports.filter((tele) => {\n        const teleport = JSON.parse(tele.value);\n        const isPublic = teleport.public && teleport.playerId !== pog.playerId;\n        const isOwned = ownedTeleports.find((t) => t.playerId === pog.playerId);\n        return isPublic || isOwned;\n    });\n    if (teleports.length === 0) {\n        await data.player.pm(`You have no teleports set, use ${prefix}settp <name> to set one.`);\n        return;\n    }\n    await data.player.pm(`You have ${teleports.length} teleport${teleports.length === 1 ? '' : 's'} available`);\n    for (const rawTeleport of teleports) {\n        const teleport = JSON.parse(rawTeleport.value);\n        await data.player.pm(` - ${teleport.name}: ${teleport.x}, ${teleport.y}, ${teleport.z} ${teleport.public ? '(public)' : ''}`);\n    }\n}\nawait main();\n//# sourceMappingURL=tplist.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": []
          },
          {
            "id": "97781d72-752b-4f92-98fd-8e2d82a2bc18",
            "createdAt": "2024-03-02T15:42:19.473Z",
            "updatedAt": "2024-03-02T15:42:19.505Z",
            "name": "teleportwaypoint",
            "trigger": "teleportwaypoint",
            "helpText": "Placeholder command, this will not be used directly. The module will install aliases for this command corresponding to the waypoint names.",
            "functionId": "0e7763f6-5c11-4311-942d-12aa93b22ca2",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "0e7763f6-5c11-4311-942d-12aa93b22ca2",
              "createdAt": "2024-03-02T15:42:19.447Z",
              "updatedAt": "2024-03-02T15:42:19.465Z",
              "code": "import { takaro, data, TakaroUserError, checkPermission } from '@takaro/helpers';\nfunction getWaypointName(name) {\n    return `waypoint ${name}`;\n}\nasync function main() {\n    const { pog, gameServerId, trigger } = data;\n    if (!checkPermission(pog, `WAYPOINTS_USE_${trigger.toUpperCase()}_${gameServerId}`)) {\n        throw new TakaroUserError(`You are not allowed to use the waypoint ${trigger}.`);\n    }\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsInstallation } = await ensureWaypointsModule();\n    const variable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getWaypointName(trigger)],\n            gameServerId: [gameServerId],\n            moduleId: [waypointsInstallation.moduleId],\n        },\n    });\n    if (variable.data.data.length === 0) {\n        throw new TakaroUserError(`Waypoint ${trigger} does not exist.`);\n    }\n    const waypoint = JSON.parse(variable.data.data[0].value);\n    await takaro.gameserver.gameServerControllerTeleportPlayer(gameServerId, pog.playerId, {\n        x: waypoint.x,\n        y: waypoint.y,\n        z: waypoint.z,\n    });\n    await pog.pm(`Teleported to waypoint ${trigger}.`);\n}\nawait main();\n//# sourceMappingURL=teleportwaypoint.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": []
          },
          {
            "id": "1267c41b-40d6-49c6-9b37-b1aa16bd1a9b",
            "createdAt": "2024-03-02T15:42:19.466Z",
            "updatedAt": "2024-03-02T15:42:19.498Z",
            "name": "teleport",
            "trigger": "tp",
            "helpText": "Teleports to one of your set locations.",
            "functionId": "05029ec5-454d-455a-a859-b6ad841299ac",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "05029ec5-454d-455a-a859-b6ad841299ac",
              "createdAt": "2024-03-02T15:42:19.440Z",
              "updatedAt": "2024-03-02T15:42:19.458Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nimport { findTp } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, arguments: args, module: mod } = data;\n    if (!checkPermission(pog, 'TELEPORTS_USE')) {\n        throw new TakaroUserError('You do not have permission to use teleports.');\n    }\n    const ownedTeleportRes = await findTp(args.tp, pog.playerId);\n    let teleports = ownedTeleportRes.data.data;\n    if (mod.userConfig.allowPublicTeleports) {\n        const maybePublicTeleportRes = await findTp(args.tp);\n        const publicTeleports = maybePublicTeleportRes.data.data.filter((tele) => {\n            const teleport = JSON.parse(tele.value);\n            return teleport.public;\n        });\n        teleports = teleports.concat(publicTeleports);\n    }\n    if (teleports.length === 0) {\n        throw new TakaroUserError(`Teleport ${args.tp} does not exist.`);\n    }\n    const timeout = mod.userConfig.timeout;\n    if (timeout !== 0) {\n        const lastExecuted = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: ['lastExecuted'],\n                gameServerId: [gameServerId],\n                playerId: [pog.playerId],\n                moduleId: [mod.moduleId],\n            },\n        });\n        let lastExecutedRecord = lastExecuted.data.data[0];\n        if (!lastExecutedRecord) {\n            const createRes = await takaro.variable.variableControllerCreate({\n                key: 'lastExecuted',\n                gameServerId,\n                playerId: pog.playerId,\n                moduleId: mod.moduleId,\n                value: new Date().toISOString(),\n            });\n            console.log(createRes);\n            lastExecutedRecord = createRes.data.data;\n        }\n        else {\n            const lastExecutedTime = new Date(lastExecutedRecord.value);\n            const now = new Date();\n            const diff = now.getTime() - lastExecutedTime.getTime();\n            if (diff < timeout) {\n                throw new TakaroUserError('You cannot teleport yet. Please wait before trying again.');\n            }\n        }\n        const teleport = JSON.parse(teleports[0].value);\n        await takaro.gameserver.gameServerControllerTeleportPlayer(gameServerId, pog.playerId, {\n            x: teleport.x,\n            y: teleport.y,\n            z: teleport.z,\n        });\n        await data.player.pm(`Teleported to ${teleport.name}.`);\n        if (timeout !== 0 && lastExecutedRecord) {\n            await takaro.variable.variableControllerUpdate(lastExecutedRecord.id, {\n                value: new Date().toISOString(),\n            });\n        }\n        return;\n    }\n    const teleport = JSON.parse(teleports[0].value);\n    await takaro.gameserver.gameServerControllerTeleportPlayer(gameServerId, pog.playerId, {\n        x: teleport.x,\n        y: teleport.y,\n        z: teleport.z,\n    });\n    await data.player.pm(`Teleported to ${teleport.name}.`);\n}\nawait main();\n//# sourceMappingURL=teleport.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "830e6d27-efae-4684-8db5-2f7ade4b8dec",
                "createdAt": "2024-03-02T15:42:19.589Z",
                "updatedAt": "2024-03-02T15:42:19.600Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location to teleport to.",
                "defaultValue": null,
                "commandId": "1267c41b-40d6-49c6-9b37-b1aa16bd1a9b",
                "position": 0
              }
            ]
          },
          {
            "id": "9edf7b36-5c54-45e2-a537-92271245d240",
            "createdAt": "2024-03-02T15:42:19.471Z",
            "updatedAt": "2024-03-02T15:42:19.503Z",
            "name": "setwaypoint",
            "trigger": "setwaypoint",
            "helpText": "Creates a new waypoint.",
            "functionId": "03bce1ed-df0a-4f50-96a4-9e5a81e29355",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "03bce1ed-df0a-4f50-96a4-9e5a81e29355",
              "createdAt": "2024-03-02T15:42:19.445Z",
              "updatedAt": "2024-03-02T15:42:19.463Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nfunction getWaypointName(name) {\n    return `waypoint ${name}`;\n}\nasync function main() {\n    const { pog, gameServerId, module: mod, arguments: args } = data;\n    if (!checkPermission(pog, 'TELEPORTS_MANAGE_WAYPOINTS')) {\n        throw new TakaroUserError('You do not have permission to manage waypoints.');\n    }\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsInstallation, waypointsDefinition } = await ensureWaypointsModule();\n    try {\n        await takaro.variable.variableControllerCreate({\n            moduleId: waypointsInstallation.moduleId,\n            gameServerId,\n            key: getWaypointName(args.waypoint),\n            value: JSON.stringify({\n                x: pog.positionX,\n                y: pog.positionY,\n                z: pog.positionZ,\n            }),\n        });\n    }\n    catch (error) {\n        if (error.message === 'Request failed with status code 409') {\n            throw new TakaroUserError(`Waypoint ${args.waypoint} already exists.`);\n        }\n    }\n    const teleportCommand = await takaro.command.commandControllerSearch({\n        filters: {\n            moduleId: [mod.moduleId],\n            name: ['teleportwaypoint'],\n        },\n    });\n    await takaro.command.commandControllerCreate({\n        moduleId: waypointsInstallation.moduleId,\n        name: `waypoint ${args.waypoint} server ${gameServerId}`,\n        trigger: args.waypoint,\n        helpText: `Teleport to waypoint ${args.waypoint}.`,\n        function: teleportCommand.data.data[0].function.code,\n    });\n    const existingPermissions = waypointsDefinition.permissions || [];\n    const permissionInputDTOs = existingPermissions.map((permission) => ({\n        permission: permission.permission,\n        description: permission.description,\n        friendlyName: permission.friendlyName,\n        canHaveCount: permission.canHaveCount,\n    }));\n    const gameServer = (await takaro.gameserver.gameServerControllerGetOne(gameServerId)).data.data;\n    await takaro.module.moduleControllerUpdate(waypointsInstallation.moduleId, {\n        permissions: [\n            {\n                permission: `WAYPOINTS_USE_${args.waypoint.toUpperCase()}_${gameServerId}`,\n                description: `Use the waypoint ${args.waypoint} on ${gameServer.name}.`,\n                friendlyName: `Use waypoint ${args.waypoint} on ${gameServer.name}`,\n                canHaveCount: false,\n            },\n            ...permissionInputDTOs,\n        ],\n    });\n    // Need to reinstall the module to ensure the new commands systemconfig and permissions are properly in place\n    await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsInstallation.moduleId, {\n        systemConfig: JSON.stringify(waypointsInstallation.systemConfig),\n        userConfig: JSON.stringify(waypointsInstallation.userConfig),\n    });\n    await pog.pm(`Waypoint ${args.waypoint} set.`);\n}\nawait main();\n//# sourceMappingURL=setwaypoint.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "704f83c8-60f6-45eb-9dca-80d9be3a2d2a",
                "createdAt": "2024-03-02T15:42:19.595Z",
                "updatedAt": "2024-03-02T15:42:19.604Z",
                "name": "waypoint",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "9edf7b36-5c54-45e2-a537-92271245d240",
                "position": 0
              }
            ]
          },
          {
            "id": "8cb904bd-a79b-438d-bc38-b9d4b3fbddd4",
            "createdAt": "2024-03-02T15:42:19.468Z",
            "updatedAt": "2024-03-02T15:42:19.500Z",
            "name": "settp",
            "trigger": "settp",
            "helpText": "Sets a location to teleport to.",
            "functionId": "edcbf5d5-0102-4296-a553-c2d6caef1f67",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "edcbf5d5-0102-4296-a553-c2d6caef1f67",
              "createdAt": "2024-03-02T15:42:19.441Z",
              "updatedAt": "2024-03-02T15:42:19.460Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey, findTp } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, module: mod, arguments: args } = data;\n    const hasPermission = checkPermission(pog, 'TELEPORTS_USE');\n    if (!hasPermission) {\n        throw new TakaroUserError('You do not have permission to use teleports.');\n    }\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data.value;\n    const existingVariable = await findTp(args.tp);\n    if (existingVariable.data.data.length > 0) {\n        throw new TakaroUserError(`Teleport ${args.tp} already exists, use ${prefix}deletetp ${args.tp} to delete it.`);\n    }\n    const allPlayerTeleports = await takaro.variable.variableControllerSearch({\n        search: {\n            key: getVariableKey(''),\n        },\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n    });\n    if (allPlayerTeleports.data.data.length >= hasPermission.count) {\n        throw new TakaroUserError(`You have reached the maximum number of teleports for your role, maximum allowed is ${hasPermission.count}`);\n    }\n    await takaro.variable.variableControllerCreate({\n        key: getVariableKey(args.tp),\n        value: JSON.stringify({\n            name: args.tp,\n            x: data.pog.positionX,\n            y: data.pog.positionY,\n            z: data.pog.positionZ,\n        }),\n        gameServerId,\n        moduleId: mod.moduleId,\n        playerId: pog.playerId,\n    });\n    await data.player.pm(`Teleport ${args.tp} set.`);\n}\nawait main();\n//# sourceMappingURL=settp.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "76f38ed7-a23e-4ad3-97c0-294287c08221",
                "createdAt": "2024-03-02T15:42:19.591Z",
                "updatedAt": "2024-03-02T15:42:19.600Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "8cb904bd-a79b-438d-bc38-b9d4b3fbddd4",
                "position": 0
              }
            ]
          },
          {
            "id": "1cada555-4f6a-411e-9f0e-db325bfacf22",
            "createdAt": "2024-03-02T15:42:19.469Z",
            "updatedAt": "2024-03-02T15:42:19.501Z",
            "name": "setpublic",
            "trigger": "setpublic",
            "helpText": "Sets a teleport to be public, allowing other players to teleport to it.",
            "functionId": "b66124a5-2beb-4677-97e4-7ce0d821a19c",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "b66124a5-2beb-4677-97e4-7ce0d821a19c",
              "createdAt": "2024-03-02T15:42:19.443Z",
              "updatedAt": "2024-03-02T15:42:19.461Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, module: mod, arguments: args } = data;\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data;\n    if (!mod.userConfig.allowPublicTeleports) {\n        throw new TakaroUserError('Public teleports are disabled.');\n    }\n    const hasPermission = checkPermission(pog, 'TELEPORTS_CREATE_PUBLIC');\n    if (!hasPermission) {\n        throw new TakaroUserError('You do not have permission to create public teleports.');\n    }\n    const existingTeleportsForPlayerRes = await takaro.variable.variableControllerSearch({\n        search: {\n            key: 'tp_',\n        },\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n    });\n    const existingPublicTeleportsForPlayer = existingTeleportsForPlayerRes.data.data.filter((tp) => {\n        const teleport = JSON.parse(tp.value);\n        return teleport.public;\n    });\n    if (existingPublicTeleportsForPlayer.length >= hasPermission.count) {\n        throw new TakaroUserError(`You have reached the maximum number of public teleports for your role, maximum allowed is ${hasPermission.count}`);\n    }\n    const teleportRes = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n            key: [getVariableKey(args.tp)],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    });\n    const teleports = teleportRes.data.data;\n    if (teleports.length === 0) {\n        throw new TakaroUserError(`No teleport with name ${args.tp} found, use ${prefix}settp <name> to set one first.`);\n    }\n    const teleportRecord = teleports[0];\n    const teleport = JSON.parse(teleportRecord.value);\n    await takaro.variable.variableControllerUpdate(teleportRecord.id, {\n        value: JSON.stringify({\n            ...teleport,\n            public: true,\n        }),\n    });\n    await data.player.pm(`Teleport ${args.tp} is now public.`);\n}\nawait main();\n//# sourceMappingURL=setpublic.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "3aa2bbd6-1f20-43f5-a2da-9c06ee5a9687",
                "createdAt": "2024-03-02T15:42:19.593Z",
                "updatedAt": "2024-03-02T15:42:19.602Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "1cada555-4f6a-411e-9f0e-db325bfacf22",
                "position": 0
              }
            ]
          },
          {
            "id": "4f54379f-c90e-4b00-ba3a-bc0d7c7c017c",
            "createdAt": "2024-03-02T15:42:19.470Z",
            "updatedAt": "2024-03-02T15:42:19.502Z",
            "name": "setprivate",
            "trigger": "setprivate",
            "helpText": "Sets a teleport to be private, only the teleport owner can teleport to it.",
            "functionId": "d8e5fee8-226b-482f-a302-43d8a6fc0daa",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "d8e5fee8-226b-482f-a302-43d8a6fc0daa",
              "createdAt": "2024-03-02T15:42:19.444Z",
              "updatedAt": "2024-03-02T15:42:19.462Z",
              "code": "import { takaro, data, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, arguments: args, module: mod } = data;\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data;\n    const teleportRes = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            key: [getVariableKey(args.tp)],\n            moduleId: [mod.moduleId],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    });\n    const teleports = teleportRes.data.data;\n    if (teleports.length === 0) {\n        throw new TakaroUserError(`No teleport with name ${args.tp} found, use ${prefix}settp <name> to set one first.`);\n    }\n    const teleportRecord = teleports[0];\n    const teleport = JSON.parse(teleportRecord.value);\n    await takaro.variable.variableControllerUpdate(teleportRecord.id, {\n        value: JSON.stringify({\n            ...teleport,\n            public: false,\n        }),\n    });\n    await data.player.pm(`Teleport ${args.tp} is now private.`);\n}\nawait main();\n//# sourceMappingURL=setprivate.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "5c75a97f-d8d3-4fec-bff1-4118352b1be3",
                "createdAt": "2024-03-02T15:42:19.594Z",
                "updatedAt": "2024-03-02T15:42:19.603Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "4f54379f-c90e-4b00-ba3a-bc0d7c7c017c",
                "position": 0
              }
            ]
          },
          {
            "id": "76255c4d-bf83-47dc-a08e-b2fc49005eff",
            "createdAt": "2024-03-02T15:42:19.472Z",
            "updatedAt": "2024-03-02T15:42:19.504Z",
            "name": "listwaypoints",
            "trigger": "waypoints",
            "helpText": "Lists all waypoints.",
            "functionId": "a8964bc6-fbf6-49eb-9ada-ddd2bc0a8586",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "a8964bc6-fbf6-49eb-9ada-ddd2bc0a8586",
              "createdAt": "2024-03-02T15:42:19.447Z",
              "updatedAt": "2024-03-02T15:42:19.464Z",
              "code": "import { takaro, data, checkPermission } from '@takaro/helpers';\nasync function main() {\n    const { pog, gameServerId } = data;\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsDefinition } = await ensureWaypointsModule();\n    const allWaypoints = waypointsDefinition.commands;\n    const waypointsWithPermission = allWaypoints\n        .filter((waypoint) => checkPermission(pog, `WAYPOINTS_USE_${waypoint.trigger.toUpperCase()}_${gameServerId}`))\n        .sort((a, b) => a.trigger.localeCompare(b.trigger));\n    if (!waypointsWithPermission.length) {\n        await pog.pm('There are no waypoints available.');\n        return;\n    }\n    await pog.pm(`Available waypoints: ${waypointsWithPermission.map((waypoint) => waypoint.trigger).join(', ')}`);\n}\nawait main();\n//# sourceMappingURL=listwaypoints.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": []
          },
          {
            "id": "25e52427-775b-43ca-a054-806d17a0fda6",
            "createdAt": "2024-03-02T15:42:19.479Z",
            "updatedAt": "2024-03-02T15:42:19.510Z",
            "name": "deletewaypoint",
            "trigger": "deletewaypoint",
            "helpText": "Deletes a waypoint.",
            "functionId": "cb553300-b165-4ba4-9519-81b76562f8a6",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "cb553300-b165-4ba4-9519-81b76562f8a6",
              "createdAt": "2024-03-02T15:42:19.446Z",
              "updatedAt": "2024-03-02T15:42:19.463Z",
              "code": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\nfunction getWaypointName(name) {\n    return `waypoint ${name}`;\n}\nasync function main() {\n    const { pog, gameServerId, arguments: args } = data;\n    if (!checkPermission(pog, 'TELEPORTS_MANAGE_WAYPOINTS')) {\n        throw new TakaroUserError('You do not have permission to manage waypoints.');\n    }\n    async function ensureWaypointsModule() {\n        let waypointsDefinition = (await takaro.module.moduleControllerSearch({\n            filters: {\n                name: ['Waypoints'],\n            },\n        })).data.data[0];\n        if (!waypointsDefinition) {\n            console.log('Waypoints module definition not found, creating it.');\n            waypointsDefinition = (await takaro.module.moduleControllerCreate({\n                name: 'Waypoints',\n                description: 'Waypoints module for the teleport system.',\n            })).data.data;\n        }\n        let waypointsInstallation = (await takaro.gameserver.gameServerControllerGetInstalledModules(gameServerId)).data.data.find((module) => module.name === 'Waypoints');\n        if (!waypointsInstallation) {\n            console.log('Waypoints module not found, installing it.');\n            waypointsInstallation = (await takaro.gameserver.gameServerControllerInstallModule(gameServerId, waypointsDefinition.id)).data.data;\n        }\n        return { waypointsInstallation, waypointsDefinition };\n    }\n    const { waypointsInstallation } = await ensureWaypointsModule();\n    const variable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getWaypointName(args.waypoint)],\n            gameServerId: [gameServerId],\n            moduleId: [waypointsInstallation.moduleId],\n        },\n    });\n    if (!variable.data.data.length) {\n        throw new TakaroUserError(`Waypoint ${args.waypoint} doesn't exist.`);\n    }\n    await takaro.variable.variableControllerDelete(variable.data.data[0].id);\n    const teleportCommand = await takaro.command.commandControllerSearch({\n        filters: {\n            moduleId: [waypointsInstallation.moduleId],\n            name: [`waypoint ${args.waypoint} server ${gameServerId}`],\n        },\n    });\n    if (teleportCommand.data.data.length) {\n        await takaro.command.commandControllerRemove(teleportCommand.data.data[0].id);\n    }\n    await pog.pm(`Waypoint ${args.waypoint} deleted.`);\n}\nawait main();\n//# sourceMappingURL=deletewaypoint.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "fd4dfa9e-12a7-46aa-bbe2-5c2528389922",
                "createdAt": "2024-03-02T15:42:19.597Z",
                "updatedAt": "2024-03-02T15:42:19.605Z",
                "name": "waypoint",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "25e52427-775b-43ca-a054-806d17a0fda6",
                "position": 0
              }
            ]
          },
          {
            "id": "1912592b-f4d2-4840-a295-3f17150ae34b",
            "createdAt": "2024-03-02T15:42:19.469Z",
            "updatedAt": "2024-03-02T15:42:19.500Z",
            "name": "deletetp",
            "trigger": "deletetp",
            "helpText": "Deletes a location.",
            "functionId": "be73768e-c516-4f02-9459-e3ff4b1da549",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "function": {
              "id": "be73768e-c516-4f02-9459-e3ff4b1da549",
              "createdAt": "2024-03-02T15:42:19.442Z",
              "updatedAt": "2024-03-02T15:42:19.461Z",
              "code": "import { takaro, data, TakaroUserError } from '@takaro/helpers';\nimport { getVariableKey } from './utils.js';\nasync function main() {\n    const { pog, gameServerId, arguments: args, module: mod } = data;\n    const existingVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getVariableKey(args.tp)],\n            gameServerId: [gameServerId],\n            playerId: [pog.playerId],\n            moduleId: [mod.moduleId],\n        },\n    });\n    if (existingVariable.data.data.length === 0) {\n        throw new TakaroUserError(`Teleport ${args.tp} does not exist.`);\n    }\n    await takaro.variable.variableControllerDelete(existingVariable.data.data[0].id);\n    await data.player.pm(`Teleport ${args.tp} deleted.`);\n}\nawait main();\n//# sourceMappingURL=deletetp.js.map",
              "name": null,
              "moduleId": null
            },
            "arguments": [
              {
                "id": "46115f59-7555-452a-b80f-e3a8c8746ba3",
                "createdAt": "2024-03-02T15:42:19.592Z",
                "updatedAt": "2024-03-02T15:42:19.601Z",
                "name": "tp",
                "type": "string",
                "helpText": "The location name.",
                "defaultValue": null,
                "commandId": "1912592b-f4d2-4840-a295-3f17150ae34b",
                "position": 0
              }
            ]
          }
        ],
        "functions": [
          {
            "id": "52f91e0f-0045-4983-970e-3b179e989fd8",
            "createdAt": "2024-03-02T15:42:19.448Z",
            "updatedAt": "2024-03-02T15:42:19.466Z",
            "code": "import { takaro, data } from '@takaro/helpers';\nexport function getVariableKey(tpName) {\n    return `tp_${tpName}`;\n}\nexport async function findTp(tpName, playerId) {\n    const { gameServerId, module: mod } = data;\n    return takaro.variable.variableControllerSearch({\n        filters: {\n            key: [getVariableKey(tpName)],\n            gameServerId: [gameServerId],\n            playerId: [playerId].filter(Boolean),\n            moduleId: [mod.moduleId],\n        },\n        sortBy: 'key',\n        sortDirection: 'asc',\n    });\n}\n//# sourceMappingURL=utils.js.map",
            "name": "utils",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04"
          }
        ],
        "permissions": [
          {
            "id": "c57f5e17-2f1f-4c50-9a00-f60683d25df6",
            "createdAt": "2024-03-02T15:42:19.351Z",
            "updatedAt": "2024-03-02T15:42:19.352Z",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "permission": "TELEPORTS_CREATE_PUBLIC",
            "friendlyName": "Create Public Teleports",
            "description": "Allows the player to create public teleports.",
            "canHaveCount": true
          },
          {
            "id": "2c3c18b6-5f31-4ec0-a53a-ec350a983be2",
            "createdAt": "2024-03-02T15:42:19.351Z",
            "updatedAt": "2024-03-02T15:42:19.352Z",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "permission": "TELEPORTS_MANAGE_WAYPOINTS",
            "friendlyName": "Manage waypoints",
            "description": "Allows creating, deleting, and managing waypoints.",
            "canHaveCount": false
          },
          {
            "id": "47d94d5d-b263-4eeb-9c2d-ebb879e77a29",
            "createdAt": "2024-03-02T15:42:19.351Z",
            "updatedAt": "2024-03-02T15:42:19.352Z",
            "moduleId": "1174e2a4-9eb9-4713-a7aa-a8d49dae7d04",
            "permission": "TELEPORTS_USE",
            "friendlyName": "Use Teleports",
            "description": "Allows the player to use teleports modules.",
            "canHaveCount": true
          }
        ]
      },
      "userConfig": {
        "timeout": 1337,
        "allowPublicTeleports": false
      },
      "systemConfig": {
        "commands": {
          "settp": {
            "cost": 0,
            "delay": 0
          },
          "tplist": {
            "cost": 0,
            "delay": 0
          },
          "deletetp": {
            "cost": 0,
            "delay": 0
          },
          "teleport": {
            "cost": 0,
            "delay": 0
          },
          "setpublic": {
            "cost": 0,
            "delay": 0
          },
          "setprivate": {
            "cost": 0,
            "delay": 0
          },
          "setwaypoint": {
            "cost": 0,
            "delay": 0
          },
          "listwaypoints": {
            "cost": 0,
            "delay": 0
          },
          "deletewaypoint": {
            "cost": 0,
            "delay": 0
          },
          "teleportwaypoint": {
            "cost": 0,
            "delay": 0
          }
        }
      }
    }
  },
  "status": 200,
  "test": {
    "group": "Module Assignments",
    "snapshot": true,
    "name": "Update installation config",
    "filteredFields": [
      "gameserverId",
      "moduleId",
      "functionId",
      "commandId"
    ],
    "expectedStatus": 200,
    "standardEnvironment": true
  }
}