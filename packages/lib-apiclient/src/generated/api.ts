/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface APIOutput
 */
export interface APIOutput {
  /**
   *
   * @type {MetadataOutput}
   * @memberof APIOutput
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface CapabilityOutputDTO
 */
export interface CapabilityOutputDTO {
  /**
   *
   * @type {string}
   * @memberof CapabilityOutputDTO
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CapabilityOutputDTO
   */
  capability: CapabilityOutputDTOCapabilityEnum;
}

export const CapabilityOutputDTOCapabilityEnum = {
  Root: 'ROOT',
  ManageUsers: 'MANAGE_USERS',
  ReadUsers: 'READ_USERS',
  ManageRoles: 'MANAGE_ROLES',
  ReadRoles: 'READ_ROLES',
  ManageGameservers: 'MANAGE_GAMESERVERS',
  ReadGameservers: 'READ_GAMESERVERS',
} as const;

export type CapabilityOutputDTOCapabilityEnum =
  typeof CapabilityOutputDTOCapabilityEnum[keyof typeof CapabilityOutputDTOCapabilityEnum];

/**
 *
 * @export
 * @interface DomainCreateInputDTO
 */
export interface DomainCreateInputDTO {
  /**
   *
   * @type {string}
   * @memberof DomainCreateInputDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface DomainCreateOutputDTO
 */
export interface DomainCreateOutputDTO {
  /**
   *
   * @type {DomainOutputDTO}
   * @memberof DomainCreateOutputDTO
   */
  domain: DomainOutputDTO;
  /**
   *
   * @type {UserOutputDTO}
   * @memberof DomainCreateOutputDTO
   */
  rootUser: UserOutputDTO;
  /**
   *
   * @type {RoleOutputDTO}
   * @memberof DomainCreateOutputDTO
   */
  rootRole: RoleOutputDTO;
  /**
   *
   * @type {string}
   * @memberof DomainCreateOutputDTO
   */
  password: string;
}
/**
 *
 * @export
 * @interface DomainCreateOutputDTOAPI
 */
export interface DomainCreateOutputDTOAPI {
  /**
   *
   * @type {DomainCreateOutputDTO}
   * @memberof DomainCreateOutputDTOAPI
   */
  data: DomainCreateOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof DomainCreateOutputDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface DomainOutputArrayDTOAPI
 */
export interface DomainOutputArrayDTOAPI {
  /**
   *
   * @type {Array<DomainOutputDTO>}
   * @memberof DomainOutputArrayDTOAPI
   */
  data: Array<DomainOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof DomainOutputArrayDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface DomainOutputDTO
 */
export interface DomainOutputDTO {
  /**
   *
   * @type {string}
   * @memberof DomainOutputDTO
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof DomainOutputDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface DomainOutputDTOAPI
 */
export interface DomainOutputDTOAPI {
  /**
   *
   * @type {DomainOutputDTO}
   * @memberof DomainOutputDTOAPI
   */
  data: DomainOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof DomainOutputDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface DomainSearchInputAllowedFilters
 */
export interface DomainSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof DomainSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface DomainSearchInputDTO
 */
export interface DomainSearchInputDTO {
  /**
   *
   * @type {DomainSearchInputAllowedFilters}
   * @memberof DomainSearchInputDTO
   */
  filters?: DomainSearchInputAllowedFilters;
  /**
   *
   * @type {number}
   * @memberof DomainSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof DomainSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof DomainSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof DomainSearchInputDTO
   */
  sortDirection?: DomainSearchInputDTOSortDirectionEnum;
}

export const DomainSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type DomainSearchInputDTOSortDirectionEnum =
  typeof DomainSearchInputDTOSortDirectionEnum[keyof typeof DomainSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface ErrorOutput
 */
export interface ErrorOutput {
  /**
   *
   * @type {string}
   * @memberof ErrorOutput
   */
  code: string;
}
/**
 *
 * @export
 * @interface GetUserDTO
 */
export interface GetUserDTO {
  /**
   *
   * @type {string}
   * @memberof GetUserDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface HealthOutputDTO
 */
export interface HealthOutputDTO {
  /**
   *
   * @type {boolean}
   * @memberof HealthOutputDTO
   */
  healthy: boolean;
}
/**
 *
 * @export
 * @interface ITakaroQuery
 */
export interface ITakaroQuery {
  /**
   *
   * @type {any}
   * @memberof ITakaroQuery
   */
  filters?: any;
  /**
   *
   * @type {number}
   * @memberof ITakaroQuery
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof ITakaroQuery
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof ITakaroQuery
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof ITakaroQuery
   */
  sortDirection?: ITakaroQuerySortDirectionEnum;
}

export const ITakaroQuerySortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type ITakaroQuerySortDirectionEnum =
  typeof ITakaroQuerySortDirectionEnum[keyof typeof ITakaroQuerySortDirectionEnum];

/**
 *
 * @export
 * @interface LoginDTO
 */
export interface LoginDTO {
  /**
   *
   * @type {string}
   * @memberof LoginDTO
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof LoginDTO
   */
  password: string;
}
/**
 *
 * @export
 * @interface LoginOutputDTO
 */
export interface LoginOutputDTO {
  /**
   *
   * @type {string}
   * @memberof LoginOutputDTO
   */
  token: string;
}
/**
 *
 * @export
 * @interface LoginOutputDTOAPI
 */
export interface LoginOutputDTOAPI {
  /**
   *
   * @type {LoginOutputDTO}
   * @memberof LoginOutputDTOAPI
   */
  data: LoginOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof LoginOutputDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface MetadataOutput
 */
export interface MetadataOutput {
  /**
   *
   * @type {MetadataOutputServerTime}
   * @memberof MetadataOutput
   */
  serverTime: MetadataOutputServerTime;
  /**
   *
   * @type {ErrorOutput}
   * @memberof MetadataOutput
   */
  error: ErrorOutput;
}
/**
 * @type MetadataOutputServerTime
 * @export
 */
export type MetadataOutputServerTime = string;

/**
 *
 * @export
 * @interface ParamId
 */
export interface ParamId {
  /**
   *
   * @type {string}
   * @memberof ParamId
   */
  id: string;
}
/**
 *
 * @export
 * @interface RoleCreateInputDTO
 */
export interface RoleCreateInputDTO {
  /**
   *
   * @type {string}
   * @memberof RoleCreateInputDTO
   */
  name: string;
  /**
   *
   * @type {Array<any>}
   * @memberof RoleCreateInputDTO
   */
  capabilities: Array<any>;
}
/**
 *
 * @export
 * @interface RoleOutputArrayDTOAPI
 */
export interface RoleOutputArrayDTOAPI {
  /**
   *
   * @type {Array<RoleOutputDTO>}
   * @memberof RoleOutputArrayDTOAPI
   */
  data: Array<RoleOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof RoleOutputArrayDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface RoleOutputDTO
 */
export interface RoleOutputDTO {
  /**
   *
   * @type {string}
   * @memberof RoleOutputDTO
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RoleOutputDTO
   */
  name: string;
  /**
   *
   * @type {Array<any>}
   * @memberof RoleOutputDTO
   */
  capabilities: Array<any>;
}
/**
 *
 * @export
 * @interface RoleOutputDTOAPI
 */
export interface RoleOutputDTOAPI {
  /**
   *
   * @type {RoleOutputDTO}
   * @memberof RoleOutputDTOAPI
   */
  data: RoleOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof RoleOutputDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface RoleSearchInputAllowedFilters
 */
export interface RoleSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof RoleSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface RoleSearchInputDTO
 */
export interface RoleSearchInputDTO {
  /**
   *
   * @type {RoleSearchInputAllowedFilters}
   * @memberof RoleSearchInputDTO
   */
  filters?: RoleSearchInputAllowedFilters;
  /**
   *
   * @type {number}
   * @memberof RoleSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof RoleSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof RoleSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof RoleSearchInputDTO
   */
  sortDirection?: RoleSearchInputDTOSortDirectionEnum;
}

export const RoleSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type RoleSearchInputDTOSortDirectionEnum =
  typeof RoleSearchInputDTOSortDirectionEnum[keyof typeof RoleSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface RoleUpdateInputDTO
 */
export interface RoleUpdateInputDTO {
  /**
   *
   * @type {string}
   * @memberof RoleUpdateInputDTO
   */
  name: string;
  /**
   *
   * @type {Array<any>}
   * @memberof RoleUpdateInputDTO
   */
  capabilities: Array<any>;
}
/**
 *
 * @export
 * @interface SearchRoleInputDTO
 */
export interface SearchRoleInputDTO {
  /**
   *
   * @type {string}
   * @memberof SearchRoleInputDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface UpdateUserDTO
 */
export interface UpdateUserDTO {
  /**
   *
   * @type {string}
   * @memberof UpdateUserDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface UserCreateInputDTO
 */
export interface UserCreateInputDTO {
  /**
   *
   * @type {string}
   * @memberof UserCreateInputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateInputDTO
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateInputDTO
   */
  password: string;
}
/**
 *
 * @export
 * @interface UserOutputArrayDTOAPI
 */
export interface UserOutputArrayDTOAPI {
  /**
   *
   * @type {Array<UserOutputDTO>}
   * @memberof UserOutputArrayDTOAPI
   */
  data: Array<UserOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof UserOutputArrayDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface UserOutputDTO
 */
export interface UserOutputDTO {
  /**
   *
   * @type {string}
   * @memberof UserOutputDTO
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof UserOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserOutputDTO
   */
  email: string;
}
/**
 *
 * @export
 * @interface UserOutputDTOAPI
 */
export interface UserOutputDTOAPI {
  /**
   *
   * @type {UserOutputDTO}
   * @memberof UserOutputDTOAPI
   */
  data: UserOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof UserOutputDTOAPI
   */
  metadata: MetadataOutput;
}
/**
 *
 * @export
 * @interface UserSearchInputAllowedFilters
 */
export interface UserSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof UserSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface UserSearchInputDTO
 */
export interface UserSearchInputDTO {
  /**
   *
   * @type {UserSearchInputAllowedFilters}
   * @memberof UserSearchInputDTO
   */
  filters?: UserSearchInputAllowedFilters;
  /**
   *
   * @type {number}
   * @memberof UserSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof UserSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof UserSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof UserSearchInputDTO
   */
  sortDirection?: UserSearchInputDTOSortDirectionEnum;
}

export const UserSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type UserSearchInputDTOSortDirectionEnum =
  typeof UserSearchInputDTOSortDirectionEnum[keyof typeof UserSearchInputDTOSortDirectionEnum];

/**
 * DomainApi - axios parameter creator
 * @export
 */
export const DomainApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerCreate: async (
      domainCreateInputDTO?: DomainCreateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/domain`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        domainCreateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('domainControllerGetOne', 'id', id);
      const localVarPath = `/domain/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('domainControllerRemove', 'id', id);
      const localVarPath = `/domain/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerSearch: async (
      domainSearchInputDTO?: DomainSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/domain/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        domainSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerUpdate: async (
      id: string,
      domainCreateInputDTO?: DomainCreateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('domainControllerUpdate', 'id', id);
      const localVarPath = `/domain/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        domainCreateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DomainApi - functional programming interface
 * @export
 */
export const DomainApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DomainApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerCreate(
      domainCreateInputDTO?: DomainCreateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainCreateOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerCreate(
          domainCreateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerSearch(
      domainSearchInputDTO?: DomainSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerSearch(
          domainSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerUpdate(
      id: string,
      domainCreateInputDTO?: DomainCreateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerUpdate(
          id,
          domainCreateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DomainApi - factory interface
 * @export
 */
export const DomainApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DomainApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerCreate(
      domainCreateInputDTO?: DomainCreateInputDTO,
      options?: any
    ): AxiosPromise<DomainCreateOutputDTOAPI> {
      return localVarFp
        .domainControllerCreate(domainCreateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<DomainOutputDTOAPI> {
      return localVarFp
        .domainControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerRemove(id: string, options?: any): AxiosPromise<APIOutput> {
      return localVarFp
        .domainControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerSearch(
      domainSearchInputDTO?: DomainSearchInputDTO,
      options?: any
    ): AxiosPromise<DomainOutputArrayDTOAPI> {
      return localVarFp
        .domainControllerSearch(domainSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerUpdate(
      id: string,
      domainCreateInputDTO?: DomainCreateInputDTO,
      options?: any
    ): AxiosPromise<DomainOutputDTOAPI> {
      return localVarFp
        .domainControllerUpdate(id, domainCreateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DomainApi - object-oriented interface
 * @export
 * @class DomainApi
 * @extends {BaseAPI}
 */
export class DomainApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerCreate(
    domainCreateInputDTO?: DomainCreateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return DomainApiFp(this.configuration)
      .domainControllerCreate(domainCreateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return DomainApiFp(this.configuration)
      .domainControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerRemove(id: string, options?: AxiosRequestConfig) {
    return DomainApiFp(this.configuration)
      .domainControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerSearch(
    domainSearchInputDTO?: DomainSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return DomainApiFp(this.configuration)
      .domainControllerSearch(domainSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerUpdate(
    id: string,
    domainCreateInputDTO?: DomainCreateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return DomainApiFp(this.configuration)
      .domainControllerUpdate(id, domainCreateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MetaApi - axios parameter creator
 * @export
 */
export const MetaApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetHealth: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/healthz`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get open api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApi: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/openapi.json`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get open api html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApiHtml: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api.html`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MetaApi - functional programming interface
 * @export
 */
export const MetaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MetaApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetHealth(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HealthOutputDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.metaGetHealth(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get open api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetOpenApi(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.metaGetOpenApi(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get open api html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetOpenApiHtml(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.metaGetOpenApiHtml(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * MetaApi - factory interface
 * @export
 */
export const MetaApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MetaApiFp(configuration);
  return {
    /**
     *
     * @summary Get health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetHealth(options?: any): AxiosPromise<HealthOutputDTO> {
      return localVarFp
        .metaGetHealth(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get open api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApi(options?: any): AxiosPromise<void> {
      return localVarFp
        .metaGetOpenApi(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get open api html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApiHtml(options?: any): AxiosPromise<void> {
      return localVarFp
        .metaGetOpenApiHtml(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MetaApi - object-oriented interface
 * @export
 * @class MetaApi
 * @extends {BaseAPI}
 */
export class MetaApi extends BaseAPI {
  /**
   *
   * @summary Get health
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetHealth(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetHealth(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get open api
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetOpenApi(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetOpenApi(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get open api html
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetOpenApiHtml(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetOpenApiHtml(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerCreate: async (
      roleCreateInputDTO?: RoleCreateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleCreateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleControllerGetOne', 'id', id);
      const localVarPath = `/role/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleControllerRemove', 'id', id);
      const localVarPath = `/role/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerSearch: async (
      roleSearchInputDTO?: RoleSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/role/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerUpdate: async (
      id: string,
      roleUpdateInputDTO?: RoleUpdateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleControllerUpdate', 'id', id);
      const localVarPath = `/role/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleUpdateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerCreate(
      roleCreateInputDTO?: RoleCreateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerCreate(
          roleCreateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerSearch(
      roleSearchInputDTO?: RoleSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerSearch(
          roleSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerUpdate(
      id: string,
      roleUpdateInputDTO?: RoleUpdateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerUpdate(
          id,
          roleUpdateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RoleApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerCreate(
      roleCreateInputDTO?: RoleCreateInputDTO,
      options?: any
    ): AxiosPromise<RoleOutputDTOAPI> {
      return localVarFp
        .roleControllerCreate(roleCreateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<RoleOutputDTOAPI> {
      return localVarFp
        .roleControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerRemove(id: string, options?: any): AxiosPromise<APIOutput> {
      return localVarFp
        .roleControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerSearch(
      roleSearchInputDTO?: RoleSearchInputDTO,
      options?: any
    ): AxiosPromise<RoleOutputArrayDTOAPI> {
      return localVarFp
        .roleControllerSearch(roleSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerUpdate(
      id: string,
      roleUpdateInputDTO?: RoleUpdateInputDTO,
      options?: any
    ): AxiosPromise<RoleOutputDTOAPI> {
      return localVarFp
        .roleControllerUpdate(id, roleUpdateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerCreate(
    roleCreateInputDTO?: RoleCreateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .roleControllerCreate(roleCreateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .roleControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerRemove(id: string, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .roleControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerSearch(
    roleSearchInputDTO?: RoleSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .roleControllerSearch(roleSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerUpdate(
    id: string,
    roleUpdateInputDTO?: RoleUpdateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .roleControllerUpdate(id, roleUpdateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Assign role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerAssignRole: async (
      id: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerAssignRole', 'id', id);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('userControllerAssignRole', 'roleId', roleId);
      const localVarPath = `/user/{id}/role/{roleId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create
     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerCreate: async (
      userCreateInputDTO?: UserCreateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerGetOne', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Login
     * @param {LoginDTO} [loginDTO] LoginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogin: async (
      loginDTO?: LoginDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerRemove', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemoveRole: async (
      id: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerRemoveRole', 'id', id);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('userControllerRemoveRole', 'roleId', roleId);
      const localVarPath = `/user/{id}/role/{roleId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSearch: async (
      userSearchInputDTO?: UserSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {UpdateUserDTO} [updateUserDTO] UpdateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdate: async (
      id: string,
      updateUserDTO?: UpdateUserDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerUpdate', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Assign role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerAssignRole(
      id: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerAssignRole(
          id,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create
     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerCreate(
      userCreateInputDTO?: UserCreateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerCreate(
          userCreateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Login
     * @param {LoginDTO} [loginDTO] LoginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerLogin(
      loginDTO?: LoginDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LoginOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerLogin(loginDTO, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerRemoveRole(
      id: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerRemoveRole(
          id,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerSearch(
      userSearchInputDTO?: UserSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerSearch(
          userSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {UpdateUserDTO} [updateUserDTO] UpdateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerUpdate(
      id: string,
      updateUserDTO?: UpdateUserDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerUpdate(
          id,
          updateUserDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Assign role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerAssignRole(
      id: string,
      roleId: string,
      options?: any
    ): AxiosPromise<APIOutput> {
      return localVarFp
        .userControllerAssignRole(id, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create
     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerCreate(
      userCreateInputDTO?: UserCreateInputDTO,
      options?: any
    ): AxiosPromise<UserOutputDTOAPI> {
      return localVarFp
        .userControllerCreate(userCreateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<UserOutputDTOAPI> {
      return localVarFp
        .userControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Login
     * @param {LoginDTO} [loginDTO] LoginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogin(
      loginDTO?: LoginDTO,
      options?: any
    ): AxiosPromise<LoginOutputDTOAPI> {
      return localVarFp
        .userControllerLogin(loginDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemove(id: string, options?: any): AxiosPromise<APIOutput> {
      return localVarFp
        .userControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemoveRole(
      id: string,
      roleId: string,
      options?: any
    ): AxiosPromise<APIOutput> {
      return localVarFp
        .userControllerRemoveRole(id, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSearch(
      userSearchInputDTO?: UserSearchInputDTO,
      options?: any
    ): AxiosPromise<UserOutputArrayDTOAPI> {
      return localVarFp
        .userControllerSearch(userSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {UpdateUserDTO} [updateUserDTO] UpdateUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdate(
      id: string,
      updateUserDTO?: UpdateUserDTO,
      options?: any
    ): AxiosPromise<UserOutputDTOAPI> {
      return localVarFp
        .userControllerUpdate(id, updateUserDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Assign role
   * @param {string} id
   * @param {string} roleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerAssignRole(
    id: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerAssignRole(id, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create
   * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerCreate(
    userCreateInputDTO?: UserCreateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerCreate(userCreateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .userControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Login
   * @param {LoginDTO} [loginDTO] LoginDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerLogin(
    loginDTO?: LoginDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerLogin(loginDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerRemove(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .userControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove role
   * @param {string} id
   * @param {string} roleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerRemoveRole(
    id: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerRemoveRole(id, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerSearch(
    userSearchInputDTO?: UserSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerSearch(userSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {UpdateUserDTO} [updateUserDTO] UpdateUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerUpdate(
    id: string,
    updateUserDTO?: UpdateUserDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerUpdate(id, updateUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
