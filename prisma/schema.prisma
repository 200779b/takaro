// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Domain {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  gameServers GameServer[]
  cronJobs    CronJob[]
  functions   Function[]
  users       User[]
  roles       Role[]
}

model GameServer {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  name           String
  connectionInfo Json
  domain         Domain                @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId       String                @db.Uuid
  players        Player[]
  cronJobs       CronJobOnGameServer[]
}

model User {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String
  email        String       @unique
  passwordHash String
  roles        RoleOnUser[]
  domain       Domain       @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId     String       @db.Uuid
}

model Role {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String
  domain       Domain         @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId     String         @db.Uuid
  capabilities CAPABILITIES[]
  users        RoleOnUser[]
}

model RoleOnUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String   @db.Uuid

  @@id([userId, roleId])
}

model Player {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  platformId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  gameServer   GameServer @relation(fields: [gameServerId], references: [id], onDelete: Cascade)
  gameServerId String     @db.Uuid
}

model CronJob {
  id          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  name        String
  domain      Domain                @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId    String                @db.Uuid
  gameServers CronJobOnGameServer[]
}

model CronJobOnGameServer {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cronJob      CronJob    @relation(fields: [cronJobId], references: [id], onDelete: Cascade)
  cronJobId    String     @db.Uuid
  gameServer   GameServer @relation(fields: [gameServerId], references: [id], onDelete: Cascade)
  gameServerId String     @db.Uuid

  @@id([cronJobId, gameServerId])
}

model Function {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String   @db.Uuid
  code      String
}

enum CAPABILITIES {
  ROOT
  MANAGE_USERS
  READ_USERS
  MANAGE_ROLES
  READ_ROLES
}
